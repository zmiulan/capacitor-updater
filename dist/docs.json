{
  "api": {
    "name": "CapacitorUpdaterPlugin",
    "slug": "capacitorupdaterplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "notifyAppReady",
        "signature": "() => Promise<AppReadyResult>",
        "parameters": [],
        "returns": "Promise<AppReadyResult>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise resolved directly"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Notify Capacitor Updater that the current bundle is working (a rollback will occur if this method is not called on every app launch)\nBy default this method should be called in the first 10 sec after app launch, otherwise a rollback will occur.\nChange this behaviour with {@link appReadyTimeout}",
        "complexTypes": [
          "AppReadyResult"
        ],
        "slug": "notifyappready"
      },
      {
        "name": "setUpdateUrl",
        "signature": "(options: UpdateUrl) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "contains the URL to use for checking for updates.",
            "type": "UpdateUrl"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options contains the URL to use for checking for updates."
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "5.4.0"
          }
        ],
        "docs": "Set the updateUrl for the app, this will be used to check for updates.",
        "complexTypes": [
          "UpdateUrl"
        ],
        "slug": "setupdateurl"
      },
      {
        "name": "setStatsUrl",
        "signature": "(options: StatsUrl) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "contains the URL to use for sending statistics.",
            "type": "StatsUrl"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options contains the URL to use for sending statistics."
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "5.4.0"
          }
        ],
        "docs": "Set the statsUrl for the app, this will be used to send statistics. Passing an empty string will disable statistics gathering.",
        "complexTypes": [
          "StatsUrl"
        ],
        "slug": "setstatsurl"
      },
      {
        "name": "setChannelUrl",
        "signature": "(options: ChannelUrl) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "contains the URL to use for setting the channel.",
            "type": "ChannelUrl"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options contains the URL to use for setting the channel."
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "5.4.0"
          }
        ],
        "docs": "Set the channelUrl for the app, this will be used to set the channel.",
        "complexTypes": [
          "ChannelUrl"
        ],
        "slug": "setchannelurl"
      },
      {
        "name": "download",
        "signature": "(options: DownloadOptions) => Promise<BundleInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "The {@link DownloadOptions} for downloading a new bundle zip.",
            "type": "DownloadOptions"
          }
        ],
        "returns": "Promise<BundleInfo>",
        "tags": [
          {
            "name": "example",
            "text": "const bundle = await CapacitorUpdater.download({ url: `https://example.com/versions/${version}/dist.zip`, version });"
          },
          {
            "name": "returns",
            "text": "The {@link BundleInfo} for the specified bundle."
          },
          {
            "name": "param",
            "text": "options The {@link DownloadOptions} for downloading a new bundle zip."
          }
        ],
        "docs": "Download a new bundle from the provided URL, it should be a zip file, with files inside or with a unique id inside with all your files",
        "complexTypes": [
          "BundleInfo",
          "DownloadOptions"
        ],
        "slug": "download"
      },
      {
        "name": "next",
        "signature": "(options: BundleId) => Promise<BundleInfo>",
        "parameters": [
          {
            "name": "options",
            "docs": "Contains the ID of the next Bundle to set on next app launch. {@link BundleInfo.id}",
            "type": "BundleId"
          }
        ],
        "returns": "Promise<BundleInfo>",
        "tags": [
          {
            "name": "param",
            "text": "options Contains the ID of the next Bundle to set on next app launch. {@link BundleInfo.id}"
          },
          {
            "name": "returns",
            "text": "The {@link BundleInfo} for the specified bundle id."
          },
          {
            "name": "throws",
            "text": "{Error} When there is no index.html file inside the bundle folder."
          }
        ],
        "docs": "Set the next bundle to be used when the app is reloaded.",
        "complexTypes": [
          "BundleInfo",
          "BundleId"
        ],
        "slug": "next"
      },
      {
        "name": "set",
        "signature": "(options: BundleId) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "A {@link BundleId} object containing the new bundle id to set as current.",
            "type": "BundleId"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options A {@link BundleId} object containing the new bundle id to set as current."
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error} When there are is no index.html file inside the bundle folder."
          }
        ],
        "docs": "Set the current bundle and immediately reloads the app.",
        "complexTypes": [
          "BundleId"
        ],
        "slug": "set"
      },
      {
        "name": "delete",
        "signature": "(options: BundleId) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "A {@link BundleId} object containing the ID of a bundle to delete (note, this is the bundle id, NOT the version name)",
            "type": "BundleId"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options A {@link BundleId} object containing the ID of a bundle to delete (note, this is the bundle id, NOT the version name)"
          },
          {
            "name": "returns",
            "text": "When the bundle is deleted"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Deletes the specified bundle from the native app storage. Use with {@link list} to get the stored Bundle IDs.",
        "complexTypes": [
          "BundleId"
        ],
        "slug": "delete"
      },
      {
        "name": "list",
        "signature": "(options?: ListOptions | undefined) => Promise<BundleListResult>",
        "parameters": [
          {
            "name": "options",
            "docs": "The {@link ListOptions} for listing bundles",
            "type": "ListOptions | undefined"
          }
        ],
        "returns": "Promise<BundleListResult>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise containing the {@link BundleListResult.bundles}"
          },
          {
            "name": "param",
            "text": "options The {@link ListOptions} for listing bundles"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get all locally downloaded bundles in your app",
        "complexTypes": [
          "BundleListResult",
          "ListOptions"
        ],
        "slug": "list"
      },
      {
        "name": "reset",
        "signature": "(options?: ResetOptions | undefined) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "Containing {@link ResetOptions.toLastSuccessful}, `true` resets to the builtin bundle and `false` will reset to the last successfully loaded bundle.",
            "type": "ResetOptions | undefined"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options Containing {@link ResetOptions.toLastSuccessful}, `true` resets to the builtin bundle and `false` will reset to the last successfully loaded bundle."
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Reset the app to the `builtin` bundle (the one sent to Apple App Store / Google Play Store ) or the last successfully loaded bundle.",
        "complexTypes": [
          "ResetOptions"
        ],
        "slug": "reset"
      },
      {
        "name": "current",
        "signature": "() => Promise<CurrentBundleResult>",
        "parameters": [],
        "returns": "Promise<CurrentBundleResult>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise evaluating to the {@link CurrentBundleResult}"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get the current bundle, if none are set it returns `builtin`. currentNative is the original bundle installed on the device",
        "complexTypes": [
          "CurrentBundleResult"
        ],
        "slug": "current"
      },
      {
        "name": "reload",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise which is resolved when the view is reloaded"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Reload the view",
        "complexTypes": [],
        "slug": "reload"
      },
      {
        "name": "setMultiDelay",
        "signature": "(options: MultiDelayConditions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "Containing the {@link MultiDelayConditions} array of conditions to set",
            "type": "MultiDelayConditions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "example",
            "text": "// Delay the update after the user kills the app or after a background of 300000 ms (5 minutes)\nawait CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'kill' }, { kind: 'background', value: '300000' }] })"
          },
          {
            "name": "example",
            "text": "// Delay the update after the specific iso8601 date is expired\nawait CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'date', value: '2022-09-14T06:14:11.920Z' }] })"
          },
          {
            "name": "example",
            "text": "// Delay the update after the first background (default behaviour without setting delay)\nawait CapacitorUpdater.setMultiDelay({ delayConditions: [{ kind: 'background' }] })"
          },
          {
            "name": "param",
            "text": "options Containing the {@link MultiDelayConditions} array of conditions to set"
          },
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.3.0"
          }
        ],
        "docs": "Sets a {@link DelayCondition} array containing conditions that the Plugin will use to delay the update.\nAfter all conditions are met, the update process will run start again as usual, so update will be installed after a backgrounding or killing the app.\nFor the `date` kind, the value should be an iso8601 date string.\nFor the `background` kind, the value should be a number in milliseconds.\nFor the `nativeVersion` kind, the value should be the version number.\nFor the `kill` kind, the value is not used.\nThe function has unconsistent behavior the option kill do trigger the update after the first kill and not after the next background like other options. This will be fixed in a future major release.",
        "complexTypes": [
          "MultiDelayConditions"
        ],
        "slug": "setmultidelay"
      },
      {
        "name": "cancelDelay",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Cancels a {@link DelayCondition} to process an update immediately.",
        "complexTypes": [],
        "slug": "canceldelay"
      },
      {
        "name": "getLatest",
        "signature": "(options?: GetLatestOptions | undefined) => Promise<LatestVersion>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "GetLatestOptions | undefined"
          }
        ],
        "returns": "Promise<LatestVersion>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise resolved when url is loaded"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Get Latest bundle available from update Url",
        "complexTypes": [
          "LatestVersion",
          "GetLatestOptions"
        ],
        "slug": "getlatest"
      },
      {
        "name": "setChannel",
        "signature": "(options: SetChannelOptions) => Promise<ChannelRes>",
        "parameters": [
          {
            "name": "options",
            "docs": "Is the {@link SetChannelOptions} channel to set",
            "type": "SetChannelOptions"
          }
        ],
        "returns": "Promise<ChannelRes>",
        "tags": [
          {
            "name": "param",
            "text": "options Is the {@link SetChannelOptions} channel to set"
          },
          {
            "name": "returns",
            "text": "A Promise which is resolved when the new channel is set"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.7.0"
          }
        ],
        "docs": "Sets the channel for this device. The channel has to allow for self assignment for this to work.\nDo not use this method to set the channel at boot when `autoUpdate` is enabled in the {@link PluginsConfig}.\nThis method is to set the channel after the app is ready.\nThis methods send to Capgo backend a request to link the device ID to the channel. Capgo can accept or refuse depending of the setting of your channel.",
        "complexTypes": [
          "ChannelRes",
          "SetChannelOptions"
        ],
        "slug": "setchannel"
      },
      {
        "name": "unsetChannel",
        "signature": "(options: UnsetChannelOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "UnsetChannelOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise resolved when channel is set"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.7.0"
          }
        ],
        "docs": "Unset the channel for this device. The device will then return to the default channel",
        "complexTypes": [
          "UnsetChannelOptions"
        ],
        "slug": "unsetchannel"
      },
      {
        "name": "getChannel",
        "signature": "() => Promise<GetChannelRes>",
        "parameters": [],
        "returns": "Promise<GetChannelRes>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise that resolves with the channel info"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.8.0"
          }
        ],
        "docs": "Get the channel for this device",
        "complexTypes": [
          "GetChannelRes"
        ],
        "slug": "getchannel"
      },
      {
        "name": "setCustomId",
        "signature": "(options: SetCustomIdOptions) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "is the {@link SetCustomIdOptions} customId to set",
            "type": "SetCustomIdOptions"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "param",
            "text": "options is the {@link SetCustomIdOptions} customId to set"
          },
          {
            "name": "returns",
            "text": "an Promise resolved instantly"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "4.9.0"
          }
        ],
        "docs": "Set a custom ID for this device",
        "complexTypes": [
          "SetCustomIdOptions"
        ],
        "slug": "setcustomid"
      },
      {
        "name": "getBuiltinVersion",
        "signature": "() => Promise<BuiltinVersion>",
        "parameters": [],
        "returns": "Promise<BuiltinVersion>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise with version for this device"
          },
          {
            "name": "since",
            "text": "5.2.0"
          }
        ],
        "docs": "Get the native app version or the builtin version if set in config",
        "complexTypes": [
          "BuiltinVersion"
        ],
        "slug": "getbuiltinversion"
      },
      {
        "name": "getDeviceId",
        "signature": "() => Promise<DeviceId>",
        "parameters": [],
        "returns": "Promise<DeviceId>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise with id for this device"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get unique ID used to identify device (sent to auto update server)",
        "complexTypes": [
          "DeviceId"
        ],
        "slug": "getdeviceid"
      },
      {
        "name": "getPluginVersion",
        "signature": "() => Promise<PluginVersion>",
        "parameters": [],
        "returns": "Promise<PluginVersion>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise with Plugin version"
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get the native Capacitor Updater plugin version (sent to auto update server)",
        "complexTypes": [
          "PluginVersion"
        ],
        "slug": "getpluginversion"
      },
      {
        "name": "isAutoUpdateEnabled",
        "signature": "() => Promise<AutoUpdateEnabled>",
        "parameters": [],
        "returns": "Promise<AutoUpdateEnabled>",
        "tags": [
          {
            "name": "returns",
            "text": "The status for auto update. Evaluates to `false` in manual mode."
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get the state of auto update config.",
        "complexTypes": [
          "AutoUpdateEnabled"
        ],
        "slug": "isautoupdateenabled"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "since",
            "text": "1.0.0"
          }
        ],
        "docs": "Remove all listeners for this plugin.",
        "complexTypes": [],
        "slug": "removealllisteners"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'download', listenerFunc: (state: DownloadEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'download'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: DownloadEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "2.0.11"
          }
        ],
        "docs": "Listen for bundle download event in the App. Fires once a download has started, during downloading and when finished.",
        "complexTypes": [
          "PluginListenerHandle",
          "DownloadEvent"
        ],
        "slug": "addlistenerdownload-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'noNeedUpdate', listenerFunc: (state: NoNeedEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'noNeedUpdate'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: NoNeedEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Listen for no need to update event, useful when you want force check every time the app is launched",
        "complexTypes": [
          "PluginListenerHandle",
          "NoNeedEvent"
        ],
        "slug": "addlistenernoneedupdate-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'updateAvailable', listenerFunc: (state: UpdateAvailableEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'updateAvailable'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: UpdateAvailableEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Listen for available update event, useful when you want to force check every time the app is launched",
        "complexTypes": [
          "PluginListenerHandle",
          "UpdateAvailableEvent"
        ],
        "slug": "addlistenerupdateavailable-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'downloadComplete', listenerFunc: (state: DownloadCompleteEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'downloadComplete'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: DownloadCompleteEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Listen for downloadComplete events.",
        "complexTypes": [
          "PluginListenerHandle",
          "DownloadCompleteEvent"
        ],
        "slug": "addlistenerdownloadcomplete-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'majorAvailable', listenerFunc: (state: MajorAvailableEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'majorAvailable'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: MajorAvailableEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "2.3.0"
          }
        ],
        "docs": "Listen for Major update event in the App, let you know when major update is blocked by setting disableAutoUpdateBreaking",
        "complexTypes": [
          "PluginListenerHandle",
          "MajorAvailableEvent"
        ],
        "slug": "addlistenermajoravailable-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'updateFailed', listenerFunc: (state: UpdateFailedEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'updateFailed'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: UpdateFailedEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "2.3.0"
          }
        ],
        "docs": "Listen for update fail event in the App, let you know when update has fail to install at next app start",
        "complexTypes": [
          "PluginListenerHandle",
          "UpdateFailedEvent"
        ],
        "slug": "addlistenerupdatefailed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'downloadFailed', listenerFunc: (state: DownloadFailedEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'downloadFailed'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: DownloadFailedEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "4.0.0"
          }
        ],
        "docs": "Listen for download fail event in the App, let you know when a bundle download has failed",
        "complexTypes": [
          "PluginListenerHandle",
          "DownloadFailedEvent"
        ],
        "slug": "addlistenerdownloadfailed-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'appReloaded', listenerFunc: () => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'appReloaded'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "() => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "4.3.0"
          }
        ],
        "docs": "Listen for reload event in the App, let you know when reload has happened",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerappreloaded-"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'appReady', listenerFunc: (state: AppReadyEvent) => void) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'appReady'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(state: AppReadyEvent) => void"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [
          {
            "name": "since",
            "text": "5.1.0"
          }
        ],
        "docs": "Listen for app ready event in the App, let you know when app is ready to use",
        "complexTypes": [
          "PluginListenerHandle",
          "AppReadyEvent"
        ],
        "slug": "addlistenerappready-"
      },
      {
        "name": "isAutoUpdateAvailable",
        "signature": "() => Promise<AutoUpdateAvailable>",
        "parameters": [],
        "returns": "Promise<AutoUpdateAvailable>",
        "tags": [
          {
            "name": "returns",
            "text": "The availability status for auto update. Evaluates to `false` when serverUrl is set."
          },
          {
            "name": "throws",
            "text": "{Error}"
          }
        ],
        "docs": "Get if auto update is available (not disabled by serverUrl).",
        "complexTypes": [
          "AutoUpdateAvailable"
        ],
        "slug": "isautoupdateavailable"
      },
      {
        "name": "getNextBundle",
        "signature": "() => Promise<BundleInfo | null>",
        "parameters": [],
        "returns": "Promise<BundleInfo | null>",
        "tags": [
          {
            "name": "returns",
            "text": "A Promise that resolves with the next bundle information or null"
          },
          {
            "name": "throws",
            "text": "{Error}"
          },
          {
            "name": "since",
            "text": "6.8.0"
          }
        ],
        "docs": "Get the next bundle that will be used when the app reloads.\nReturns null if no next bundle is set.",
        "complexTypes": [
          "BundleInfo"
        ],
        "slug": "getnextbundle"
      }
    ],
    "properties": []
  },
  "interfaces": [
    {
      "name": "AppReadyResult",
      "slug": "appreadyresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "BundleInfo",
      "slug": "bundleinfo",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "version",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "downloaded",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "checksum",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "status",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "BundleStatus"
          ],
          "type": "BundleStatus"
        }
      ]
    },
    {
      "name": "UpdateUrl",
      "slug": "updateurl",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "StatsUrl",
      "slug": "statsurl",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "ChannelUrl",
      "slug": "channelurl",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "DownloadOptions",
      "slug": "downloadoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "url",
          "tags": [],
          "docs": "The URL of the bundle zip file (e.g: dist.zip) to be downloaded. (This can be any URL. E.g: Amazon S3, a GitHub tag, any other place you've hosted your bundle.)",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "version",
          "tags": [],
          "docs": "The version code/name of this bundle/version",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "sessionKey",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            },
            {
              "text": "undefined",
              "name": "default"
            }
          ],
          "docs": "The session key for the update",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "checksum",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            },
            {
              "text": "undefined",
              "name": "default"
            }
          ],
          "docs": "The checksum for the update",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "BundleId",
      "slug": "bundleid",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "id",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "BundleListResult",
      "slug": "bundlelistresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundles",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo[]"
        }
      ]
    },
    {
      "name": "ListOptions",
      "slug": "listoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "raw",
          "tags": [
            {
              "text": "6.14.0",
              "name": "since"
            },
            {
              "text": "false",
              "name": "default"
            }
          ],
          "docs": "Whether to return the raw bundle list or the manifest. If true, the list will attempt to read the internal database instead of files on disk.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "ResetOptions",
      "slug": "resetoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "toLastSuccessful",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "CurrentBundleResult",
      "slug": "currentbundleresult",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        },
        {
          "name": "native",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "MultiDelayConditions",
      "slug": "multidelayconditions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "delayConditions",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "DelayCondition"
          ],
          "type": "DelayCondition[]"
        }
      ]
    },
    {
      "name": "DelayCondition",
      "slug": "delaycondition",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "kind",
          "tags": [
            {
              "text": "value is useless for",
              "name": "param"
            },
            {
              "text": "kind \"kill\", optional for \"background\" (default value: \"0\") and required for \"nativeVersion\" and \"date\"",
              "name": "param"
            }
          ],
          "docs": "Set up delay conditions in setMultiDelay",
          "complexTypes": [
            "DelayUntilNext"
          ],
          "type": "DelayUntilNext"
        },
        {
          "name": "value",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "LatestVersion",
      "slug": "latestversion",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Result of getLatest method",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "checksum",
          "tags": [
            {
              "text": "6",
              "name": "since"
            }
          ],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "major",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "message",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "sessionKey",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "error",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "old",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "manifest",
          "tags": [
            {
              "text": "6.1",
              "name": "since"
            }
          ],
          "docs": "",
          "complexTypes": [
            "ManifestEntry"
          ],
          "type": "ManifestEntry[] | undefined"
        }
      ]
    },
    {
      "name": "ManifestEntry",
      "slug": "manifestentry",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "file_name",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | null"
        },
        {
          "name": "file_hash",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | null"
        },
        {
          "name": "download_url",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | null"
        }
      ]
    },
    {
      "name": "GetLatestOptions",
      "slug": "getlatestoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "channel",
          "tags": [
            {
              "text": "6.8.0",
              "name": "since"
            },
            {
              "text": "undefined",
              "name": "default"
            }
          ],
          "docs": "The channel to get the latest version for\nThe channel must allow 'self_assign' for this to work",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "ChannelRes",
      "slug": "channelres",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "status",
          "tags": [
            {
              "text": "4.7.0",
              "name": "since"
            }
          ],
          "docs": "Current status of set channel",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "error",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "message",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        }
      ]
    },
    {
      "name": "SetChannelOptions",
      "slug": "setchanneloptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "channel",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        },
        {
          "name": "triggerAutoUpdate",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "UnsetChannelOptions",
      "slug": "unsetchanneloptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "triggerAutoUpdate",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "GetChannelRes",
      "slug": "getchannelres",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "channel",
          "tags": [
            {
              "text": "4.8.0",
              "name": "since"
            }
          ],
          "docs": "Current status of get channel",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "error",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "message",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "status",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "allowSet",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ]
    },
    {
      "name": "SetCustomIdOptions",
      "slug": "setcustomidoptions",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "customId",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "BuiltinVersion",
      "slug": "builtinversion",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "DeviceId",
      "slug": "deviceid",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "deviceId",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "PluginVersion",
      "slug": "pluginversion",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AutoUpdateEnabled",
      "slug": "autoupdateenabled",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "enabled",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    },
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ]
    },
    {
      "name": "DownloadEvent",
      "slug": "downloadevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "percent",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Current status of download, between 0 and 100.",
          "complexTypes": [],
          "type": "number"
        },
        {
          "name": "bundle",
          "tags": [],
          "docs": "",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "NoNeedEvent",
      "slug": "noneedevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Current status of download, between 0 and 100.",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "UpdateAvailableEvent",
      "slug": "updateavailableevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Current status of download, between 0 and 100.",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "DownloadCompleteEvent",
      "slug": "downloadcompleteevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a new update is available.",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "MajorAvailableEvent",
      "slug": "majoravailableevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a new major bundle is available.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "UpdateFailedEvent",
      "slug": "updatefailedevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a update failed to install.",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        }
      ]
    },
    {
      "name": "DownloadFailedEvent",
      "slug": "downloadfailedevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [
            {
              "text": "4.0.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a download fail.",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AppReadyEvent",
      "slug": "appreadyevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "bundle",
          "tags": [
            {
              "text": "5.2.0",
              "name": "since"
            }
          ],
          "docs": "Emitted when the app is ready to use.",
          "complexTypes": [
            "BundleInfo"
          ],
          "type": "BundleInfo"
        },
        {
          "name": "status",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "string"
        }
      ]
    },
    {
      "name": "AutoUpdateAvailable",
      "slug": "autoupdateavailable",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "available",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "boolean"
        }
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "BundleStatus",
      "slug": "bundlestatus",
      "docs": "",
      "types": [
        {
          "text": "'success'",
          "complexTypes": []
        },
        {
          "text": "'error'",
          "complexTypes": []
        },
        {
          "text": "'pending'",
          "complexTypes": []
        },
        {
          "text": "'downloading'",
          "complexTypes": []
        }
      ]
    },
    {
      "name": "DelayUntilNext",
      "slug": "delayuntilnext",
      "docs": "",
      "types": [
        {
          "text": "'background'",
          "complexTypes": []
        },
        {
          "text": "'kill'",
          "complexTypes": []
        },
        {
          "text": "'nativeVersion'",
          "complexTypes": []
        },
        {
          "text": "'date'",
          "complexTypes": []
        }
      ]
    }
  ],
  "pluginConfigs": [
    {
      "name": "CapacitorUpdater",
      "slug": "capacitorupdater",
      "properties": [
        {
          "name": "appReadyTimeout",
          "tags": [
            {
              "text": "10000 // (10 seconds)",
              "name": "default"
            },
            {
              "text": "1000 // (1 second)",
              "name": "example"
            }
          ],
          "docs": "Configure the number of milliseconds the native plugin should wait before considering an update 'failed'.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "responseTimeout",
          "tags": [
            {
              "text": "20 // (20 second)",
              "name": "default"
            },
            {
              "text": "10 // (10 second)",
              "name": "example"
            }
          ],
          "docs": "Configure the number of milliseconds the native plugin should wait before considering API timeout.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "autoDeleteFailed",
          "tags": [
            {
              "text": "true",
              "name": "default"
            },
            {
              "text": "false",
              "name": "example"
            }
          ],
          "docs": "Configure whether the plugin should use automatically delete failed bundles.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "autoDeletePrevious",
          "tags": [
            {
              "text": "true",
              "name": "default"
            },
            {
              "text": "false",
              "name": "example"
            }
          ],
          "docs": "Configure whether the plugin should use automatically delete previous bundles after a successful update.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "autoUpdate",
          "tags": [
            {
              "text": "true",
              "name": "default"
            },
            {
              "text": "false",
              "name": "example"
            }
          ],
          "docs": "Configure whether the plugin should use Auto Update via an update server.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "resetWhenUpdate",
          "tags": [
            {
              "text": "true",
              "name": "default"
            },
            {
              "text": "false",
              "name": "example"
            }
          ],
          "docs": "Automatically delete previous downloaded bundles when a newer native app bundle is installed to the device.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "updateUrl",
          "tags": [
            {
              "text": "https://plugin.capgo.app/updates",
              "name": "default"
            },
            {
              "text": "https://example.com/api/auto_update",
              "name": "example"
            }
          ],
          "docs": "Configure the URL / endpoint to which update checks are sent.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "channelUrl",
          "tags": [
            {
              "text": "https://plugin.capgo.app/channel_self",
              "name": "default"
            },
            {
              "text": "https://example.com/api/channel",
              "name": "example"
            }
          ],
          "docs": "Configure the URL / endpoint for channel operations.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "statsUrl",
          "tags": [
            {
              "text": "https://plugin.capgo.app/stats",
              "name": "default"
            },
            {
              "text": "https://example.com/api/stats",
              "name": "example"
            }
          ],
          "docs": "Configure the URL / endpoint to which update statistics are sent.\n\nOnly available for Android and iOS. Set to \"\" to disable stats reporting.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "privateKey",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            }
          ],
          "docs": "Configure the private key for end to end live update encryption.\n\nOnly available for Android and iOS. Deprecated in version 6.2.0. will be removed in version 7.0.0.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "publicKey",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "6.2.0",
              "name": "since"
            }
          ],
          "docs": "Configure the public key for end to end live update encryption Version 2\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "version",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the current version of the app. This will be used for the first update request.\nIf not set, the plugin will get the version from the native code.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "directUpdate",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "5.1.0",
              "name": "since"
            }
          ],
          "docs": "Make the plugin direct install the update when the app what just updated/installed. Only for autoUpdate mode.\n\nOnly available for Android and iOS.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "periodCheckDelay",
          "tags": [
            {
              "text": "600 // (10 minutes)",
              "name": "default"
            }
          ],
          "docs": "Configure the delay period for period update check. the unit is in seconds.\n\nOnly available for Android and iOS.\nCannot be less than 600 seconds (10 minutes).",
          "complexTypes": [],
          "type": "number | undefined"
        },
        {
          "name": "localS3",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local server for testing or self-hosted update server.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "localHost",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local server for testing or self-hosted update server.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "localWebHost",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local server for testing or self-hosted update server.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "localSupa",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local server for testing or self-hosted update server.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "localSupaAnon",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "4.17.48",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local server for testing.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "localApi",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "6.3.3",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local api for testing.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "localApiFiles",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "6.3.3",
              "name": "since"
            }
          ],
          "docs": "Configure the CLI to use a local file api for testing.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "allowModifyUrl",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "5.4.0",
              "name": "since"
            }
          ],
          "docs": "Allow the plugin to modify the updateUrl, statsUrl and channelUrl dynamically from the JavaScript side.",
          "complexTypes": [],
          "type": "boolean | undefined"
        },
        {
          "name": "defaultChannel",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "5.5.0",
              "name": "since"
            }
          ],
          "docs": "Set the default channel for the app in the config.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "appId",
          "tags": [
            {
              "text": "undefined",
              "name": "default"
            },
            {
              "text": "6.0.0",
              "name": "since"
            }
          ],
          "docs": "Configure the app id for the app in the config.",
          "complexTypes": [],
          "type": "string | undefined"
        },
        {
          "name": "keepUrlPathAfterReload",
          "tags": [
            {
              "text": "false",
              "name": "default"
            },
            {
              "text": "6.8.0",
              "name": "since"
            }
          ],
          "docs": "Configure the plugin to keep the URL path after a reload.\nWARNING: When a reload is triggered, 'window.history' will be cleared.",
          "complexTypes": [],
          "type": "boolean | undefined"
        }
      ],
      "docs": "CapacitorUpdater can be configured with these options:"
    }
  ]
}